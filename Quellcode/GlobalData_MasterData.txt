// Main Parameters
SET ThousandSep='.';
SET DecimalSep=',';
SET MoneyThousandSep='.';
SET MoneyDecimalSep=',';
SET MoneyFormat='#.##0,00 €;-#.##0,00 €';
SET TimeFormat='hh:mm:ss';
SET DateFormat='DD.MM.YYYY';
SET TimestampFormat='DD.MM.YYYY hh:mm:ss[.fff]';
SET FirstWeekDay=0;
SET BrokenWeeks=0;
SET ReferenceDay=4;
SET FirstMonthOfYear=1;
SET CollationLocale='de-DE';
SET CreateSearchIndexOnReload=1;
SET MonthNames='Jan.;Feb.;März;Apr.;Mai;Juni;Juli;Aug.;Sep.;Okt.;Nov.;Dez.';
SET LongMonthNames='Januar;Februar;März;April;Mai;Juni;Juli;August;September;Oktober;November;Dezember';
SET DayNames='Mo.;Di.;Mi.;Do.;Fr.;Sa.;So.';
SET LongDayNames='Montag;Dienstag;Mittwoch;Donnerstag;Freitag;Samstag;Sonntag';
SET NumericalAbbreviation='3:k;6:M;9:G;12:T;15:P;18:E;21:Z;24:Y;-3:m;-6:μ;-9:n;-12:p;-15:f;-18:a;-21:z;-24:y';

// Specific parameters 
// Variablen für die GlobalData Extraktion
Let vTimestamp = Date(Addmonths(Monthstart(today() ),-1), 'YYYY-MM-DD');
// Wie viele Monate liegen zwischen unserem Umsatz und den Absatz bei den OEMs
Set vTimeLagInMonthGlobalData = 1;
// Wie viele Monate soll in die Zukunft geschaut werden
Set vNumberOfForecastMonths = 13;
// Wie viele Monate soll nach hinten geschaut werden
Set vNumberOfPastMonths = 13;
// Den Dateinamen der aktuellsten GlobalData-Datei bestimmen.
Set vTimeLagFileNameGlobalData = 1;

// Aufbau Mapping Daten
Platform_Zuordnung:
Mapping LOAD
	%key_series_project,
    [platform no.]
FROM [lib://0000_Resources/0020_QVD_Transform/Dimensions/Dimensions_Serienprojekte.qvd]
(qvd);

GlobalData_Projektzuordnung:
Mapping LOAD
	 "lmca full code",
    [platform no.]
FROM [lib://0000_Resources/0020_QVD_Transform/Dimensions/Dimensions_LMC-Projektzuordnung.qvd]
(qvd);

// Initial Load 
GlobalData_Initial:
LOad *
FROM [lib://0000_Resources/0020_QVD_Transform/Dimensions/Dimensions_LMC_Daten.qvd] (qvd);

Rename Field [country] to [Global Data country];


AktuelleGlobalData_Stammdaten:
LOAD
	Min(   date(date#(text([sop year]) & right([sop month],3), 'YYYYMMM'), 'YYYY-MM-DD')) as [Global SOP],
	Max(   date(date#(text([eop year]) & right([eop month],3), 'YYYYMMM'), 'YYYY-MM-DD')) As [Global EOP],
    Sum("production volume") as [total production volume],
	applymap('GlobalData_Projektzuordnung', [lmca full code], 'No platform no. found') as [platform no.],
    region,
    "local model line",
    "trade region",
    [Global Data country],
    "sales group",
    manufacturer,
    "local make",
    "local program code",
    "local production model",
    "global make",
    "global production model",
    gvw,
    platform as [global platform],
    plant as [global data plant],
    "production type",
    "type",
    "regional size",
    "regional body type",
    "regional status",
    "global size",
    "global body type",
    "global status",
    "next facelift",
    "last actual",
    "design lead",
    "design lead location",
    "design lead country"
Resident GlobalData_Initial
where 
applymap('GlobalData_Projektzuordnung', [lmca full code], 'No platform no. found') <> 'No platform no. found' 
and not isnull(applymap('GlobalData_Projektzuordnung', [lmca full code], 'No platform no. found'))
 and date([state month], 'DD.MM.YYYY')  = '$(vTimestamp)' 
group by 
	applymap('GlobalData_Projektzuordnung', [lmca full code], 'No platform no. found'),
    region,
    "trade region",
    [Global Data country],
    "sales group",
    manufacturer,
    "local make",
    "local model line",
    "local program code",
    "local production model",
    "global make",
    "global production model",
    gvw,
    platform,
    plant,
    "production type",
    "type",
    "regional size",
    "regional body type",
    "regional status",
    "global size",
    "global body type",
    "global status",    
    "next facelift",
    "last actual",
    "design lead",
    "design lead location",
    "design lead country"
;

Drop Table GlobalData_Initial;

// EOP
// Je Platform nur das höchste EOP behalten 
final_data_EOP:
Load 
[platform no.],
Max([Global EOP]) as [Global EOP]
Resident AktuelleGlobalData_Stammdaten
group by  [platform no.];


// SOP
// Je Platform nur das höchste EOP behalten 
final_data_SOP:
Load 
[platform no.],
Min([Global EOP]) as [Global SOP]
Resident AktuelleGlobalData_Stammdaten
group by  [platform no.];


inner join (final_data_EOP)
Load 
Max ([region production volume]) as [region production volume],
[platform no.]
Resident final_data_region
group by  [platform no.];

Drop Field [region production volume];





// region 
// Je Platform nur die Region mit dem höchsten (geplanten) Produktionsvolumen behalten 
final_data_region:
Load 
[platform no.],
region, 
Sum("total production volume") as [region production volume]
Resident AktuelleGlobalData_Stammdaten
group by  [platform no.], region;

inner join (final_data_region)
Load 
Max ([region production volume]) as [region production volume],
[platform no.]
Resident final_data_region
group by  [platform no.];

Drop Field [region production volume];



// model line
// Je Platform nur die Model Line mit dem höchsten (geplanten) Produktionsvolumen behalten 
final_data_local_model_line:
Load 
[platform no.],
"local model line", 
Sum("total production volume") as [local model line production volume]
Resident AktuelleGlobalData_Stammdaten
group by  [platform no.], "local model line";

inner join (final_data_local_model_line)
Load Max ([local model line production volume]) as [local model line production volume],
[platform no.]
Resident final_data_local_model_line
group by  [platform no.];

Drop Field [local model line production volume];






// trade region 
// Je Platform nur die Trade Region mit dem höchsten (geplanten) Produktionsvolumen behalten 
final_data_trade_region:
Load 
[platform no.],
"trade region", 
Sum("total production volume") as [trade region production volume]
Resident AktuelleGlobalData_Stammdaten
group by  [platform no.], "trade region";

inner join (final_data_trade_region)
Load Max ([trade region production volume]) as [trade region production volume],
[platform no.]
Resident final_data_trade_region
group by  [platform no.];

Drop Field [trade region production volume];



// country
// Je Platform nur die country mit dem höchsten (geplanten) Produktionsvolumen behalten 
final_data_country:
Load 
[platform no.],
[Global Data country], 
Sum("total production volume") as [Global Data country production volume]
Resident AktuelleGlobalData_Stammdaten
group by  [platform no.], [Global Data country];

inner join (final_data_country)
Load Max ([Global Data country production volume]) as [Global Data country production volume],
[platform no.]
Resident final_data_country
group by  [platform no.];

Drop Field [Global Data country production volume];


// sales group 
// Je Platform nur die sales group mit dem höchsten (geplanten) Produktionsvolumen behalten 
final_data_sales_group:
Load 
[platform no.],
[sales group], 
Sum("total production volume") as [sales group production volume]
Resident AktuelleGlobalData_Stammdaten
group by  [platform no.], [sales group];

inner join (final_data_sales_group)
Load Max ([sales group production volume]) as [sales group production volume],
[platform no.]
Resident final_data_sales_group
group by  [platform no.];

Drop Field [sales group production volume];



// manufacturer
// Je Platform nur den manufacturer mit dem höchsten (geplanten) Produktionsvolumen behalten 
final_data_manufacturer:
Load 
[platform no.],
manufacturer, 
Sum("total production volume") as [manufacturer production volume]
Resident AktuelleGlobalData_Stammdaten
group by  [platform no.], manufacturer;

inner join (final_data_manufacturer)
Load Max ([manufacturer production volume]) as [manufacturer production volume],
[platform no.]
Resident final_data_manufacturer
group by  [platform no.];

Drop Field [manufacturer production volume];


// local make
// Je Platform nur die local make mit dem höchsten (geplanten) Produktionsvolumen behalten 
final_data_local_make:
Load 
[platform no.],
[local make], 
Sum("total production volume") as [local make production volume]
Resident AktuelleGlobalData_Stammdaten
group by  [platform no.], [local make];

inner join (final_data_local_make)
Load Max ([local make production volume]) as [local make production volume],
[platform no.]
Resident final_data_local_make
group by  [platform no.];

Drop Field [local make production volume];



// "local program code"
// Je Platform nur den local program code mit dem höchsten (geplanten) Produktionsvolumen behalten 
final_data_local_program_code:
Load 
[platform no.],
"local program code", 
Sum("total production volume") as [local program code production volume]
Resident AktuelleGlobalData_Stammdaten
group by  [platform no.], "local program code";

inner join (final_data_local_program_code)
Load Max ([local program code production volume]) as [local program code production volume],
[platform no.]
Resident final_data_local_program_code
group by  [platform no.];

Drop Field [local program code production volume];



// "local production model"
// Je Platform nur den local program code mit dem höchsten (geplanten) Produktionsvolumen behalten 
final_data_local_production_model:
Load 
[platform no.],
"local production model", 
Sum("total production volume") as [local production model production volume]
Resident AktuelleGlobalData_Stammdaten
group by  [platform no.], "local production model";

inner join (final_data_local_production_model)
Load Max ([local production model production volume]) as [local production model production volume],
[platform no.]
Resident final_data_local_production_model
group by  [platform no.];

Drop Field [local production model production volume];



// "global make"
// Je Platform nur den local program code mit dem höchsten (geplanten) Produktionsvolumen behalten 
final_data_global_make:
Load 
[platform no.],
"global make", 
Sum("total production volume") as [global make production volume]
Resident AktuelleGlobalData_Stammdaten
group by  [platform no.], "global make";

inner join (final_data_global_make)
Load Max ([global make production volume]) as [global make production volume],
[platform no.]
Resident final_data_global_make
group by  [platform no.];

Drop Field [global make production volume];



// "global production model"
// Je Platform nur den global production model mit dem höchsten (geplanten) Produktionsvolumen behalten 
final_data_global_production_model:
Load 
[platform no.],
"global production model", 
Sum("total production volume") as [global production model production volume]
Resident AktuelleGlobalData_Stammdaten
group by  [platform no.], "global production model";

inner join (final_data_global_production_model)
Load Max ([global production model production volume]) as [global production model production volume],
[platform no.]
Resident final_data_global_production_model
group by  [platform no.];

Drop Field [global production model production volume];





// " gvw"
// Je Platform nur den gvw mit dem höchsten (geplanten) Produktionsvolumen behalten 
final_data_gvw:
Load 
[platform no.],
"gvw", 
Sum("total production volume") as [gvw production volume]
Resident AktuelleGlobalData_Stammdaten
group by  [platform no.], gvw;

inner join (final_data_gvw)
Load Max ([gvw production volume]) as [gvw production volume],
[platform no.]
Resident final_data_gvw
group by  [platform no.];

Drop Field [gvw production volume];



// " gvw"
// Je Platform nur den die global platform mit dem höchsten (geplanten) Produktionsvolumen behalten 
final_data_global_platform:
Load 
[platform no.],
[global platform], 
Sum("total production volume") as [global platform production volume]
Resident AktuelleGlobalData_Stammdaten
group by  [platform no.], [global platform];

inner join (final_data_global_platform)
Load Max ([global platform production volume]) as [global platform production volume],
[platform no.]
Resident final_data_global_platform
group by  [platform no.];

Drop Field [global platform production volume];





// [global data plant]
// Je Platform nur den global data plant mit dem höchsten (geplanten) Produktionsvolumen behalten 
final_data_global_data_plant:
Load 
[platform no.],
[global data plant], 
Sum("total production volume") as [global data plant production volume]
Resident AktuelleGlobalData_Stammdaten
group by  [platform no.], [global data plant];

inner join (final_data_global_data_plant)
Load Max ([global data plant production volume]) as [global data plant production volume],
[platform no.]
Resident final_data_global_data_plant
group by  [platform no.];

Drop Field [global data plant production volume];



// production type
// Je Platform nur den production type mit dem höchsten (geplanten) Produktionsvolumen behalten 
final_data_production_type:
Load 
[platform no.],
[production type], 
Sum("total production volume") as [production type production volume]
Resident AktuelleGlobalData_Stammdaten
group by  [platform no.], [production type];

inner join (final_data_production_type)
Load Max ([production type production volume]) as [production type production volume],
[platform no.]
Resident final_data_production_type
group by  [platform no.];

Drop Field [production type production volume];



// type
// Je Platform nur den type mit dem höchsten (geplanten) Produktionsvolumen behalten 
final_data_type:
Load 
[platform no.],
[type], 
Sum("total production volume") as [type production volume]
Resident AktuelleGlobalData_Stammdaten
group by  [platform no.], [type];

inner join (final_data_type)
Load Max ([type production volume]) as [type production volume],
[platform no.]
Resident final_data_type
group by  [platform no.];

Drop Field [type production volume];



// "regional size"
// Je Platform nur den type mit dem höchsten (geplanten) Produktionsvolumen behalten 
final_data_regional_size:
Load 
[platform no.],
[regional size], 
Sum("total production volume") as [regional size production volume]
Resident AktuelleGlobalData_Stammdaten
group by  [platform no.], [regional size];

inner join (final_data_regional_size)
Load Max ([regional size production volume]) as [regional size production volume],
[platform no.]
Resident final_data_regional_size
group by  [platform no.];

Drop Field [regional size production volume];






// regional body type
// Je Platform nur den type mit dem höchsten (geplanten) Produktionsvolumen behalten 
final_data_regional_body_type:
Load 
[platform no.],
[regional body type], 
Sum("total production volume") as [regional body type production volume]
Resident AktuelleGlobalData_Stammdaten
group by  [platform no.], [regional body type];

inner join (final_data_regional_body_type)
Load Max ([regional body type production volume]) as [regional body type production volume],
[platform no.]
Resident final_data_regional_body_type
group by  [platform no.];

Drop Field [regional body type production volume];



// regional status
// Je Platform nur den regional status mit dem höchsten (geplanten) Produktionsvolumen behalten 
final_data_regional_status:
Load 
[platform no.],
[regional status], 
Sum("total production volume") as [regional status production volume]
Resident AktuelleGlobalData_Stammdaten
group by  [platform no.], [regional status];

inner join (final_data_regional_status)
Load Max ([regional status production volume]) as [regional status production volume],
[platform no.]
Resident final_data_regional_status
group by  [platform no.];

Drop Field [regional status production volume];




// "global size",
// Je Platform nur den global size mit dem höchsten (geplanten) Produktionsvolumen behalten 
final_data_global_size:
Load 
[platform no.],
[global size], 
Sum("total production volume") as [global size production volume]
Resident AktuelleGlobalData_Stammdaten
group by  [platform no.], [global size];

inner join (final_data_global_size)
Load Max ([global size production volume]) as [global size production volume],
[platform no.]
Resident final_data_global_size
group by  [platform no.];

Drop Field [global size production volume];





// "global body type"
// Je Platform nur den global body type mit dem höchsten (geplanten) Produktionsvolumen behalten 
final_data_global_body_type:
Load 
[platform no.],
[global body type], 
Sum("total production volume") as [global body type production volume]
Resident AktuelleGlobalData_Stammdaten
group by  [platform no.], [global body type];

inner join (final_data_global_body_type)
Load Max ([global body type production volume]) as [global body type production volume],
[platform no.]
Resident final_data_global_body_type
group by  [platform no.];

Drop Field [global body type production volume];




// "global status"
// Je Platform nur den global status mit dem höchsten (geplanten) Produktionsvolumen behalten 
final_data_global_status:
Load 
[platform no.],
[global status], 
Sum("total production volume") as [global status production volume]
Resident AktuelleGlobalData_Stammdaten
group by  [platform no.], [global status];

inner join (final_data_global_status)
Load Max ([global status production volume]) as [global status production volume],
[platform no.]
Resident final_data_global_status
group by  [platform no.];

Drop Field [global status production volume];




// next facelift
// Je Platform nur den next facelift mit dem höchsten (geplanten) Produktionsvolumen behalten 
final_data_next_facelift:
Load 
[platform no.],
[next facelift], 
Sum("total production volume") as [next facelift production volume]
Resident AktuelleGlobalData_Stammdaten
group by  [platform no.], [next facelift];

inner join (final_data_next_facelift)
Load Max ([next facelift production volume]) as [next facelift production volume],
[platform no.]
Resident final_data_next_facelift
group by  [platform no.];

Drop Field [next facelift production volume];




// last actual
// Je Platform nur den last actual mit dem höchsten (geplanten) Produktionsvolumen behalten 
final_data_last_actual:
Load 
[platform no.],
[last actual], 
Sum("total production volume") as [last actual production volume]
Resident AktuelleGlobalData_Stammdaten
group by  [platform no.], [last actual];

inner join (final_data_last_actual)
Load Max ([last actual production volume]) as [last actual production volume],
[platform no.]
Resident final_data_last_actual
group by  [platform no.];

Drop Field [last actual production volume];




// design lead
// Je Platform nur den design lead mit dem höchsten (geplanten) Produktionsvolumen behalten 
final_data_design_lead:
Load 
[platform no.],
[design lead], 
Sum("total production volume") as [design lead production volume]
Resident AktuelleGlobalData_Stammdaten
group by  [platform no.], [design lead];

inner join (final_data_design_lead)
Load Max ([design lead production volume]) as [design lead production volume],
[platform no.]
Resident final_data_design_lead
group by  [platform no.];

Drop Field [design lead production volume];



// design lead location
// Je Platform nur den design lead location mit dem höchsten (geplanten) Produktionsvolumen behalten 
final_data_design_lead_location:
Load 
[platform no.],
[design lead location], 
Sum("total production volume") as [design lead location production volume]
Resident AktuelleGlobalData_Stammdaten
group by  [platform no.], [design lead location];

inner join (final_data_design_lead_location)
Load Max ([design lead location production volume]) as [design lead location production volume],
[platform no.]
Resident final_data_design_lead_location
group by  [platform no.];

Drop Field [design lead location production volume];




// design lead country
// Je Platform nur den type mit dem höchsten (geplanten) Produktionsvolumen behalten 
final_data_design_lead_country:
Load 
[platform no.],
[design lead country], 
Sum("total production volume") as [design lead country production volume]
Resident AktuelleGlobalData_Stammdaten
group by  [platform no.], [design lead country];

inner join (final_data_design_lead_country)
Load Max ([design lead country production volume]) as [design lead country production volume],
[platform no.]
Resident final_data_design_lead_country
group by  [platform no.];

Drop Field [design lead country production volume];



Global_data_master:
Load * Inline [
source
GlobalData
];

Let vNoOfTables = NoOfTables();
Let vIterator = $(vNoOfTables) -1;

// Jede erzeugte Tabelle dranjoinen 
Do 
	
	
    
    
    Let vCurrentTable = TableName($(vIterator));
    
    
	if WildMatch('$(vCurrentTable)', 'final_data_*') then
		join (Global_data_master) 
        Load *
        Resident [$(vCurrentTable)];
        
        Drop Table [$(vCurrentTable)];
    End if

// Ende der Schleife
	Let vIterator = $(vIterator) - 1;
Loop while vIterator > -1

Drop Table AktuelleGlobalData_Stammdaten;
Drop Field source;


// Speichern der Daten 
Store Global_data_master into 'lib://0000_Resources/0020_QVD_Transform/Facts/DataRobot/GlobalData_master.qvd' (qvd);

