// Setting Standard Variables 
SET ThousandSep=',';
SET DecimalSep='.';
SET MoneyThousandSep=',';
SET MoneyDecimalSep='.';
SET MoneyFormat='#.##0,00 €;-#.##0,00 €';
SET TimeFormat='hh:mm:ss';
SET DateFormat='YYYY-MM-DD';
SET TimestampFormat='YYYY-MM-DD hh:mm:ss[.fff]';
SET FirstWeekDay=0;
SET BrokenWeeks=0;
SET ReferenceDay=4;
SET FirstMonthOfYear=1;
SET CollationLocale='de-DE';
SET CreateSearchIndexOnReload=1;
SET MonthNames='Jan.;Feb.;März;Apr.;Mai;Juni;Juli;Aug.;Sep.;Okt.;Nov.;Dez.';
SET LongMonthNames='Januar;Februar;März;April;Mai;Juni;Juli;August;September;Oktober;November;Dezember';
SET DayNames='Mo.;Di.;Mi.;Do.;Fr.;Sa.;So.';
SET LongDayNames='Montag;Dienstag;Mittwoch;Donnerstag;Freitag;Samstag;Sonntag';
SET NumericalAbbreviation='3:k;6:M;9:G;12:T;15:P;18:E;21:Z;24:Y;-3:m;-6:μ;-9:n;-12:p;-15:f;-18:a;-21:z;-24:y';



// Mapping Loads 
Platform_Zuordnung:
Mapping LOAD
	%key_series_project,
    [platform no.]
FROM [lib://0000_Resources/0020_QVD_Transform/Dimensions/Dimensions_Serienprojekte.qvd]
(qvd);


Mapping_Customer_Group:
Mapping LOAD
    %key_customer,
    "customer group name"
FROM [lib://0000_Resources/0020_QVD_Transform/Dimensions/Dimensions_Kundenstamm.qvd]
(qvd);

Mapping_Intercompany:
Mapping LOAD
    %key_customer,
   	intercompany
FROM [lib://0000_Resources/0020_QVD_Transform/Dimensions/Dimensions_Kundenstamm.qvd]
(qvd);


GlobalData_Projektzuordnung:
Mapping LOAD
	 "lmca full code",
    [platform no.]
FROM [lib://0000_Resources/0020_QVD_Transform/Dimensions/Dimensions_LMC-Projektzuordnung.qvd]
(qvd);


Ländercode:
LOAD
    "country code",
    "country name",
    "country classification",
    "OECD Area key"
FROM [lib://Sharepoint Qlik.Reader - xlsx-Controlling/Shared Documents/xlsx - Controlling/Zuordnung Ländercode.xlsx]
(ooxml, embedded labels, table is Sheet1);

Map_Country_name:
Mapping Load 
"OECD Area key", 
"country name"
Resident Ländercode;

Map_Country_name_country_code:
Mapping Load 
 "country code", 
"country name"
Resident Ländercode;


Drop Table Ländercode;

// Parameter für die Sales-Daten
Let vSalesStartDate = MonthStart('2005-01-01');
Let vThresholdCustomsWithoutRevenue = Date(Addmonths(Monthstart(today() - 10),-12), 'YYYY-MM-DD');
Let vThresholdRevenue = 10000;
Let vThresholdNumberMonthsWithRevenue = 12;
Let vThresholdDifferenceLastFirstSales = 12;
Let vThresholdMaxFirstSalesDate = '2022-01-01';



Facts_tmp:
LOAD
    %key_company,
    classification,
    %key_series_project,
    %key_customer,
    [document date],
    Num([total net eur],'##0.00') as [total net eur]
FROM [lib://0000_Resources/0020_QVD_Transform/Facts/Facts_Allgemein_Umsatz.qvd] (qvd);



NoConcatenate
Facts:
Load *,
[sales date] & '|' & %key_company  & '|' &  [platform no.] & '|' &  [customer group name] as %key_tmp
// Es gibt Konstellationen in denen sich Umsätze genau wieder aufheben --> Daher muss die Summe des Umsatzes je Monat <> 0 sein 
where [total net eur] <> 0 
;
LOAD
    %key_company,
    applymap('Mapping_Intercompany', %key_customer, 'No') as Intercompany,
    ApplyMap('Mapping_Customer_Group', %key_customer, 'no concern assigned') as [customer group name],
    date(monthstart([document date]),'YYYY-MM-DD') as [sales date],
    ApplyMap('Platform_Zuordnung', %key_series_project, 'No Platform found') as [platform no.],
    RangeMax(Sum("total net eur"),0) as [total net eur]
	
Resident Facts_tmp
where classification = 'revenue'
and [total net eur] <> 0
and date(monthstart([document date]),'YYYY-MM-DD') >= '$(vSalesStartDate)'
and date(monthstart([document date]),'YYYY-MM-DD') < date(MonthStart(today()),'YYYY-MM-DD')
and ApplyMap('Platform_Zuordnung', %key_series_project, 'No Platform found') <> 'No Platform found'
and not isnull(ApplyMap('Platform_Zuordnung', %key_series_project, 'No Platform found'))
and match(%key_company, 100, 101, 103)
group by  %key_company, // currency, 
ApplyMap('Mapping_Customer_Group', %key_customer, 'no concern assigned'),
date(monthstart([document date]),'YYYY-MM-DD'), 
applymap('Mapping_Intercompany', %key_customer, 'No'), 
ApplyMap('Platform_Zuordnung', %key_series_project, 'No Platform found')
;


Drop Table Facts_tmp;




// 0er Datensätze erzeugen 
NoConcatenate
Facts_Nuller:
Load Distinct   
%key_company,
 Intercompany,
[platform no.],
 [customer group name],
0 as [total net eur]

Resident Facts
; 



join (Facts_Nuller)
Load Distinct
 [sales date]
Resident Facts;



// Nur die "Nuller"-Datensätze behalten
NoConcatenate
Facts_Nuller_tmp:
Load *
Resident Facts_Nuller
// Die Kombination aus Kunde, Serienprojekt, Monat, Firma und Lieferland darf noch nicht existieren  
where not exists(%key_tmp, [sales date] & '|' &  %key_company  // & '|' & %key_customer  //  & '|' &  "delivery country"  & '|' &  [platform no.]   &'|' & [customer group name] )
;

Drop Field %key_tmp;

Drop Table Facts_Nuller;
Rename Table Facts_Nuller_tmp to Facts_Nuller;


// "Nuller"-Datensätze anhängen
Concatenate(Facts)
Load * 
Resident Facts_Nuller;



Drop Table Facts_Nuller;


// Dimensionen anfügen 
left join (Facts) 
LOAD
    %key_company,
    applymap('Map_Country_name_country_code', "plant country code", 'no country found') as [plant country]
FROM [lib://0000_Resources/0020_QVD_Transform/Dimensions/Dimensions_Firmenstamm_pA.qvd]
(qvd);


left join (Facts) 
LOAD
	"platform no." ,
    Date(Max(EOP),'YYYY-MM-DD') as [series project EOP],
    Date(Min(SOP),'YYYY-MM-DD') as [series project SOP],
    "OEM",
    "GlobalData Allocation"
FROM [lib://0000_Resources/0020_QVD_Transform/Dimensions/Dimensions_Serienprojekte.qvd]
(qvd)
group by "platform no.", "platform name", OEM, "GlobalData Allocation";



// Sales Logiken noch anwenden 
left join (Facts)
Aggregation:
Load 
%key_company  & '|' & [customer group name] & '|' & [platform no.]  as %key_DataRobot, 
Sum([total net eur]) as [total revenue],
Date(Min([sales date]),'YYYY-MM-DD') as [First sales date], 
Date(Max([sales date]),'YYYY-MM-DD') as [Last sales date],
Count([sales date]) as [number months with revenue],
%key_company,
[customer group name],
[platform no.]
Resident Facts
// Keine künstlich erzeugten Nullerdatensätze betrachten 
where [total net eur] <> 0
group by 
%key_company, [platform no.], [customer group name] 
; 





NoConcatenate
Facts_tmp: 
Load *,
if( ([sales date] < [First sales date] or [sales date] > [Last sales date]) and [total net eur] = 0 , 'No', 'Yes') as [active]
Resident Facts
where [total revenue] >= $(vThresholdRevenue)
and [number months with revenue] >= $(vThresholdNumberMonthsWithRevenue)
and Addmonths([Last sales date], - $(vThresholdDifferenceLastFirstSales) ) >= [First sales date]
and [First sales date] <= '$(vThresholdMaxFirstSalesDate)';

Drop Table Facts; 
Rename Table Facts_tmp to Facts; 
Drop Field [total revenue], [Last sales date], [number months with revenue]; 




// Je Datensatz das Datum des vorherigen letzten Verkaufs ermitteln 
// Dazu zunächst je Key die verschiedenen Verkaufsdaten ermitteln 
NoConcatenate
Verschiedene_Verkaufsdatensätze:
Load Distinct 
[sales date], 
[total net eur],
%key_DataRobot
Resident Facts
where [total net eur] <> 0; 


join (Verschiedene_Verkaufsdatensätze) 
Load 
%key_DataRobot,
[total net eur] as [previous revenue],
[sales date] as [previous sales date]
Resident Verschiedene_Verkaufsdatensätze; 

NoConcatenate 
Verschiedene_Verkaufsdatensätze_final: 
Load 
	Date(Max([previous sales date]),'YYYY-MM-DD') 	as [last sales date],
	Count([previous sales date]) 					as [number months with revenue],
	Sum([previous revenue]) 						as [accumulated revenue],
    Sum(if([previous sales date] >= addmonths([sales date],-12), [previous revenue], 0)) 		as [revenue last 12 months],
    Sum(if([previous sales date] >= '2020-04-01', [previous revenue], 0)) 						as [accumulated revenue since 2020],
	[sales date], 
	%key_DataRobot
Resident Verschiedene_Verkaufsdatensätze
where [previous sales date] < [sales date]
group by [sales date],  %key_DataRobot; 

Drop Table Verschiedene_Verkaufsdatensätze;

left join (Facts) 
Load * 
Resident Verschiedene_Verkaufsdatensätze_final; 

Drop Table Verschiedene_Verkaufsdatensätze_final; 


// Sub für OECD Daten 
Sub OECD_Data (tablename, präfix, vMaxSalesDate)


      
      // left join ($(tablename))
      Arbeitslosenquote:
      LOAD
          date("OECD date", 'YYYY-MM-DD')  as [unemployment date],
          Num(value,'##0.00') as [$(präfix) unemployment rate],
          ApplyMap('Map_Country_name',"Area key", 'no country description found') as [$(präfix)]
      FROM [lib://0000_Resources/0020_QVD_Transform/Facts/OECD/Dataset_Monthly Unemployment rates.qvd]
      (qvd);

	  MaxUnemployment:
	  Load Max([unemployment date]) as MaxDate  Resident Arbeitslosenquote;
	  LET vMaxUnemploymentDate = Date(Peek('MaxDate',0,'MaxUnemployment'),'YYYY-MM-DD');
      Drop Table MaxUnemployment;
      
      Let vTimeLagInMonthUnemployment = ((year( '$(vMaxSalesDate)' )*12)+month( '$(vMaxSalesDate)' )) - (((year('$(vMaxUnemploymentDate)')*12)+month('$(vMaxUnemploymentDate)')));
      
      left join ($(tablename))
      LOAD
          date(Addmonths([unemployment date], $(vTimeLagInMonthUnemployment),'YYYY-MM-DD') ) as [sales date],
          [$(präfix) unemployment rate],
          [$(präfix)]
	  Resident Arbeitslosenquote;
      
      Drop Table Arbeitslosenquote;
      
      
      
      
	    
      Short_term_transport_indicators:
      LOAD
          *,
          Num(value,'##0.00') as value_tmp
      FROM [lib://0000_Resources/0020_QVD_Transform/Facts/OECD/Dataset_Short term transport indicators.qvd]
      (qvd);

      Drop Field value from Short_term_transport_indicators; Rename Field value_tmp to value;

	  
      MaxRegistration:
	  Load Max([OECD date]) as MaxDate  Resident Short_term_transport_indicators where FUEL = '_T' and VEHICLE_TYPE = 'CARS' and Measure = 'REGISTRATIONS';
	  LET vMaxRegistrationDate = Date(Peek('MaxDate',0,'MaxRegistration'),'YYYY-MM-DD');
      Drop Table MaxRegistration;
	  Let vTimeLagInMonthRegistrations = ((year( '$(vMaxSalesDate)' )*12)+month( '$(vMaxSalesDate)' )) - (((year('$(vMaxRegistrationDate)')*12)+month('$(vMaxRegistrationDate)')));
      

      left join ($(tablename))
      LOAD 
      date(Addmonths("OECD date", $(vTimeLagInMonthRegistrations) ),'YYYY-MM-DD')  as [sales date],
      ApplyMap('Map_Country_name',"Area key", 'no country description found') as [$(präfix)],
      value as [$(präfix) registration]
      Resident Short_term_transport_indicators
      // Kombination aus Petrol und Diesel (
      where FUEL = '_T'
      and VEHICLE_TYPE = 'CARS'
      and Measure = 'REGISTRATIONS';
		
      
      MaxFreight:
	  Load Max([OECD date]) as MaxDate  Resident Short_term_transport_indicators where TRANSPORT_MODE = 'ROAD' and GEO_COVERAGE = '_T' and Measure = 'FREIGHT';
	  LET vMaxFreightDate = Date(Peek('MaxDate',0,'MaxFreight'),'YYYY-MM-DD');
      Drop Table MaxFreight;
	  Let vTimeLagInMonthFreight = ((year( '$(vMaxSalesDate)' )*12)+month( '$(vMaxSalesDate)' )) - (((year('$(vMaxFreightDate)')*12)+month('$(vMaxFreightDate)')));
      

      left join ($(tablename))
      LOAD 
      date(Addmonths("OECD date", $(vTimeLagInMonthFreight) ),'YYYY-MM-DD')  as [sales date],
      ApplyMap('Map_Country_name',"Area key", 'no country description found') as [$(präfix)],
      value as [$(präfix) Freight]
      Resident Short_term_transport_indicators
      where TRANSPORT_MODE = 'ROAD'
      and GEO_COVERAGE = '_T'
      and Measure = 'FREIGHT';

	  MaxFuel:
	  Load Max([OECD date]) as MaxDate  Resident Short_term_transport_indicators where FUEL = '_T' and  Measure = 'FUEL';
	  LET vMaxFuelDate = Date(Peek('MaxDate',0,'MaxFuel'),'YYYY-MM-DD');
      Drop Table MaxFuel;
	  Let vTimeLagInMonthFuel = ((year( '$(vMaxSalesDate)' )*12)+month( '$(vMaxSalesDate)' )) - (((year('$(vMaxFuelDate)')*12)+month('$(vMaxFuelDate)')));
      
      
      
      // fuel deliveries in Millionen Tonnen
      left join ($(tablename))
      LOAD 
      date(Addmonths("OECD date", $(vTimeLagInMonthFuel) ),'YYYY-MM-DD')  as [sales date],
      ApplyMap('Map_Country_name',"Area key", 'no country description found') as [$(präfix)],
      value as [$(präfix) fuel]
      Resident Short_term_transport_indicators
      where  Measure = 'FUEL'
      and FUEL = '_T';

	  
      MaxFatalities:
	  Load Max([OECD date]) as MaxDate  Resident Short_term_transport_indicators where Measure = 'FATALITIES';
	  LET vMaxFatalitiesDate = Date(Peek('MaxDate',0,'MaxFatalities'),'YYYY-MM-DD');
      Drop Table MaxFatalities;
	  Let vTimeLagInMonthFatalities = ((year( '$(vMaxSalesDate)' )*12)+month( '$(vMaxSalesDate)' )) - (((year('$(vMaxFatalitiesDate)')*12)+month('$(vMaxFatalitiesDate)')));

      // road fatalities / Verkehrstote
      left join ($(tablename))
      LOAD 
      date(Addmonths("OECD date", $(vTimeLagInMonthFatalities) ),'YYYY-MM-DD')  as [sales date],
      ApplyMap('Map_Country_name',"Area key", 'no country description found') as [$(präfix)],
      value as [$(präfix) fatalities]
      Resident Short_term_transport_indicators
      where  Measure = 'FATALITIES';


      Drop Table Short_term_transport_indicators;



      Business_tendency_surveys:
      LOAD
          *,
          Num(value,'##0.00') as value_tmp
      FROM [lib://0000_Resources/0020_QVD_Transform/Facts/OECD/Dataset_Business tendency surveys.qvd]
      (qvd);


	 Drop Field value from Business_tendency_surveys; Rename Field value_tmp to value;

		
      MaxOrderBooks:
	  Load Max([OECD date]) as MaxDate  Resident Business_tendency_surveys where Measure = 'OB' and [Activity description] = 'Manufacturing';
	  LET vMaxOrderBooksDate = Date(Peek('MaxDate',0,'MaxOrderBooks'),'YYYY-MM-DD');
      Drop Table MaxOrderBooks;
	  Let vTimeLagInMonthOrderBooks = ((year( '$(vMaxSalesDate)' )*12)+month( '$(vMaxSalesDate)' )) - (((year('$(vMaxOrderBooksDate)')*12)+month('$(vMaxOrderBooksDate)')));  
        
      // Order books
      left join ($(tablename))
      LOAD 
      date(Addmonths("OECD date", $(vTimeLagInMonthOrderBooks)),'YYYY-MM-DD') as [sales date],
      ApplyMap('Map_Country_name',"Area key", 'no country description found') as [$(präfix)],
      value as [$(präfix) Order books]
      Resident Business_tendency_surveys
      where  Measure = 'OB'
      and [Activity description] = 'Manufacturing';
      
      
      MaxBusinessSituation:
	  Load Max([OECD date]) as MaxDate  Resident Business_tendency_surveys where  Measure = 'BU' and [time horizon description] = 'Future tendency';
	  LET vMaxBusinessSituationDate = Date(Peek('MaxDate',0,'MaxBusinessSituation'),'YYYY-MM-DD');
      Drop Table MaxBusinessSituation;
	  Let vTimeLagInMonthBusinessSituation = ((year( '$(vMaxSalesDate)' )*12)+month( '$(vMaxSalesDate)' )) - (((year('$(vMaxBusinessSituationDate)')*12)+month('$(vMaxBusinessSituationDate)')));
      
      // Business Situation
      left join ($(tablename))
      LOAD 
      date(Addmonths("OECD date", $(vTimeLagInMonthBusinessSituation)),'YYYY-MM-DD') as [sales date],
      ApplyMap('Map_Country_name',"Area key", 'no country description found') as [$(präfix)],
      value as [$(präfix) Business situation]
      Resident Business_tendency_surveys
      where  Measure = 'BU'
      and [time horizon description] = 'Future tendency'
      ;
	
      
      MaxFinishedGoods:
	  Load Max([OECD date]) as MaxDate  Resident Business_tendency_surveys where   Measure = 'FG' and [Activity description] = 'Manufacturing';
	  LET vMaxFinishedGoodsDate = Date(Peek('MaxDate',0,'MaxFinishedGoods'),'YYYY-MM-DD');
      Drop Table MaxFinishedGoods;
	  Let vTimeLagInMonthFinishedGoods = ((year( '$(vMaxSalesDate)' )*12)+month( '$(vMaxSalesDate)' )) - (((year('$(vMaxFinishedGoodsDate)')*12)+month('$(vMaxFinishedGoodsDate)')));

      // Finished Goods 
      left join ($(tablename))
      LOAD 
      date(Addmonths("OECD date", $(vTimeLagInMonthFinishedGoods)),'YYYY-MM-DD') as [sales date],
      ApplyMap('Map_Country_name',"Area key", 'no country description found') as [$(präfix)],
      value as [$(präfix) Finished good stocks]
      Resident Business_tendency_surveys
      where  Measure = 'FG'
      and [Activity description] = 'Manufacturing';

	  MaxSellingPrices:
	  Load Max([OECD date]) as MaxDate  Resident Business_tendency_surveys where    Measure = 'SP' and [Activity description] = 'Manufacturing' and [time horizon description] = 'Future tendency';
	  LET vMaxSellingPricesDate = Date(Peek('MaxDate',0,'MaxSellingPrices'),'YYYY-MM-DD');
      Drop Table MaxSellingPrices;
	  Let vTimeLagInMonthSellingPrices = ((year( '$(vMaxSalesDate)' )*12)+month( '$(vMaxSalesDate)' )) - (((year('$(vMaxSellingPricesDate)')*12)+month('$(vMaxSellingPricesDate)')));

      // Selling prices
      left join ($(tablename))
      LOAD 
      date(Addmonths("OECD date", $(vTimeLagInMonthSellingPrices)),'YYYY-MM-DD') as [sales date],
      ApplyMap('Map_Country_name',"Area key", 'no country description found') as [$(präfix)],
      value as [$(präfix) selling prices]
      Resident Business_tendency_surveys
      where  Measure = 'SP'
      and [time horizon description] = 'Future tendency'
      and [Activity description] = 'Manufacturing';

	  MaxDemandEvolution:
	  Load Max([OECD date]) as MaxDate  Resident Business_tendency_surveys where   Measure = 'DE'  and [time horizon description] = 'Future tendency';
	  LET vMaxDemandEvolutionDate = Date(Peek('MaxDate',0,'MaxDemandEvolution'),'YYYY-MM-DD');
      Drop Table MaxDemandEvolution;
	  Let vTimeLagInMonthDemandEvolution = ((year( '$(vMaxSalesDate)' )*12)+month( '$(vMaxSalesDate)' )) - (((year('$(vMaxDemandEvolutionDate)')*12)+month('$(vMaxDemandEvolutionDate)')));	
       
      // Demand evolution 
      left join ($(tablename))
      LOAD 
      date(Addmonths("OECD date", $(vTimeLagInMonthDemandEvolution)),'YYYY-MM-DD') as [sales date],
      ApplyMap('Map_Country_name',"Area key", 'no country description found') as [$(präfix)],
      value as [$(präfix) Demand evolution]
      Resident Business_tendency_surveys
      where  Measure = 'DE'
      and [time horizon description] = 'Future tendency';

	  MaxProduction:
	  Load Max([OECD date]) as MaxDate  Resident Business_tendency_surveys where   Measure = 'PR'  and [time horizon description] = 'Future tendency';
	  LET vMaxProductionDate = Date(Peek('MaxDate',0,'MaxProduction'),'YYYY-MM-DD');
      Drop Table MaxProduction;
	  Let vTimeLagInMonthProduction = ((year( '$(vMaxSalesDate)' )*12)+month( '$(vMaxSalesDate)' )) - (((year('$(vMaxProductionDate)')*12)+month('$(vMaxProductionDate)')));	

      // Production
      left join ($(tablename))
      LOAD 
      date(Addmonths("OECD date", $(vTimeLagInMonthProduction)),'YYYY-MM-DD') as [sales date],
      ApplyMap('Map_Country_name',"Area key", 'no country description found') as [$(präfix)],
      value as [$(präfix) Production]
      Resident Business_tendency_surveys
      where  Measure = 'PR'
      and [time horizon description] = 'Future tendency';


      Drop Table Business_tendency_surveys;


	   // Haushaltsnettoeinkommen --> Wird nur quartalsweise erfasst 
      Household_indicators_dashboard:
      LOAD
          date("OECD date",'YYYY-MM-DD') as [household savings rate date],
          ApplyMap('Map_Country_name',"Area key", 'no country description found') as [$(präfix)],
          value as [$(präfix) household savings rate] ,
          'origin' as flag
      FROM [lib://0000_Resources/0020_QVD_Transform/Facts/OECD/Dataset_Household indicators dashboard.qvd]
      (qvd)
      where Measure = 'B8GS1M_B6GA';
      
      Concatenate (Household_indicators_dashboard) 
      LOAD
          date(addmonths([household savings rate date] ,1 ),'YYYY-MM-DD') as [household savings rate date],
          [$(präfix)],
          [$(präfix) household savings rate] 
      Resident Household_indicators_dashboard
      where flag = 'origin';

      Concatenate (Household_indicators_dashboard) 
      LOAD
          date(addmonths([household savings rate date],2 ),'YYYY-MM-DD') as [household savings rate date],
          [$(präfix)],
          [$(präfix) household savings rate] 
      Resident Household_indicators_dashboard
      where flag = 'origin';
      
      
      MaxHouseholdSavingsRate:
	  Load Max([household savings rate date]) as MaxDate  Resident Household_indicators_dashboard;
	  LET vMaxHouseholdSavingsRateDate = Date(Peek('MaxDate',0,'MaxHouseholdSavingsRate'),'YYYY-MM-DD');
      Drop Table MaxHouseholdSavingsRate;
	  Let vTimeLagInMonthHouseholdSavingsRate = ((year( '$(vMaxSalesDate)' )*12)+month( '$(vMaxSalesDate)' )) - (((year('$(vMaxHouseholdSavingsRateDate)')*12)+month('$(vMaxHouseholdSavingsRateDate)')));
     
	  left join ($(tablename))
      LOAD 
      	 date(Addmonths([household savings rate date], $(vTimeLagInMonthHouseholdSavingsRate)),'YYYY-MM-DD') as [sales date],
         [$(präfix)],
         [$(präfix) household savings rate]
      	 
      Resident Household_indicators_dashboard; 

      Drop Table Household_indicators_dashboard;     
      


      // Economic situation und Consumer prices
      Consumer_opinion_surveys:
      LOAD
          ApplyMap('Map_Country_name',"Area key", 'no country description found') as [$(präfix)],
          date("OECD date",'YYYY-MM-DD') as [sales date],
          value,
          "Measure"
      FROM [lib://0000_Resources/0020_QVD_Transform/Facts/OECD/Dataset_Consumer opinion surveys.qvd]
      (qvd)
      where match("Measure", 'IN', 'ES');

	  MaxEconomicSituation:
	  Load Max([sales date]) as MaxDate  Resident Consumer_opinion_surveys where   Measure = 'ES';
	  LET vMaxEconomicSituationDate = Date(Peek('MaxDate',0,'MaxEconomicSituation'),'YYYY-MM-DD');
      Drop Table MaxEconomicSituation;
	  Let vTimeLagInMonthEconomicSituation = ((year( '$(vMaxSalesDate)' )*12)+month( '$(vMaxSalesDate)' )) - (((year('$(vMaxEconomicSituationDate)')*12)+month('$(vMaxEconomicSituationDate)')));	


      left join ($(tablename))
      Load 
          Date(AddMonths([sales date], $(vTimeLagInMonthEconomicSituation)), 'YYYY-MM-DD') as [sales date], 
          [$(präfix)],
          value as [$(präfix) economic situation] 
      Resident Consumer_opinion_surveys
      where "Measure" = 'ES';

	  MaxConsumerPrices:
	  Load Max([sales date]) as MaxDate  Resident Consumer_opinion_surveys where   Measure = 'IN';
	  LET vMaxConsumerPricesDate = Date(Peek('MaxDate',0,'MaxConsumerPrices'),'YYYY-MM-DD');
      Drop Table MaxConsumerPrices;
	  Let vTimeLagInMonthConsumerPrices = ((year( '$(vMaxSalesDate)' )*12)+month( '$(vMaxSalesDate)' )) - (((year('$(vMaxConsumerPricesDate)')*12)+month('$(vMaxConsumerPricesDate)')));	


      left join ($(tablename))
      Load 
          Date(AddMonths([sales date], $(vTimeLagInMonthConsumerPrices) ), 'YYYY-MM-DD') as [sales date], 
          [$(präfix)],
          value as [$(präfix) consumer prices] 
      Resident Consumer_opinion_surveys
      where "Measure" = 'IN';

      Drop Table Consumer_opinion_surveys;

	 



      // Verbraucherpreisindex / Inflation
      // left join ($(tablename))
      
      Consumer_price_indices:
      LOAD
          date("OECD date",'YYYY-MM-DD') as [ConsumerPriceIndex date],
          ApplyMap('Map_Country_name',"Area key", 'no country description found') as [$(präfix)],
          value as [$(präfix) consumer price index]
	  FROM [lib://0000_Resources/0020_QVD_Transform/Facts/OECD/Dataset_Consumer price indices CPIs HICPs COICOP 1999.qvd]
      (qvd);
		
      
	  MaxConsumerPriceIndex:
	  Load Max([ConsumerPriceIndex date]) as MaxDate  Resident Consumer_price_indices;
	  LET vMaxConsumerPriceIndexDate = Date(Peek('MaxDate',0,'MaxConsumerPriceIndex'),'YYYY-MM-DD');
      Drop Table MaxConsumerPriceIndex;
	  Let vTimeLagInMonthConsumerPriceIndex = ((year( '$(vMaxSalesDate)' )*12)+month( '$(vMaxSalesDate)' )) - (((year('$(vMaxConsumerPriceIndexDate)')*12)+month('$(vMaxConsumerPriceIndexDate)')));	
   	
     left join ($(tablename))
     Load date(addmonths([ConsumerPriceIndex date], $(vTimeLagInMonthConsumerPrices) ), 'YYYY-MM-DD') as [sales date], 
     [$(präfix)],
     [$(präfix) consumer price index]
     Resident Consumer_price_indices;
     
     Drop Table Consumer_price_indices;
       
       
       
      // Kurzfristige Zinsrate  
      // left join ($(tablename)) 
      ShortTermInterestRate:
      LOAD
      ApplyMap('Map_Country_name',"Area key", 'no country description found') as [$(präfix)],
      // "Area Description" as [delivery country],
      date("OECD date",'YYYY-MM-DD') as [ShortTermInterestRate date],
      value as [$(präfix) short-term interest rate]
	// Zinsrate 
    FROM [lib://0000_Resources/0020_QVD_Transform/Facts/OECD/Dataset_Key short-term economic indicators.qvd]
	(qvd)
	where "Measure" = 'IR3TIB';

	 MaxShortTermInterestRate:
	  Load Max([ShortTermInterestRate date]) as MaxDate  Resident ShortTermInterestRate;
	  LET vMaxShortTermInterestRateDate = Date(Peek('MaxDate',0,'MaxShortTermInterestRate'),'YYYY-MM-DD');
      Drop Table MaxShortTermInterestRate;
	  Let vTimeLagInMonthShortTermInterestRate = ((year( '$(vMaxSalesDate)' )*12)+month( '$(vMaxSalesDate)' )) - (((year('$(vMaxShortTermInterestRateDate)')*12)+month('$(vMaxShortTermInterestRateDate)')));	
	
     left join ($(tablename))
     Load date(addmonths([ShortTermInterestRate date], $(vTimeLagInMonthShortTermInterestRate) ), 'YYYY-MM-DD') as [sales date], 
     [$(präfix)],
     [$(präfix) short-term interest rate]
     Resident ShortTermInterestRate;
     
     Drop Table ShortTermInterestRate;
       

End Sub


// Sub aufrufen 
MaxSales:
Load Max([sales date]) as MaxDate  Resident Facts;

LET vMaxSalesDate = Date(Peek('MaxDate',0,'MaxSales'),'YYYY-MM-DD');
Drop Table MaxSales;
 
Call OECD_Data ('Facts', 'plant country', '$(vMaxSalesDate)')



// Das geplante und tatsächliche Produktionsvolumen pro Projekt / Plattform dranjoinen (siehe hierzu die andere Qlik Script Datei) 
left join (Facts)
LOAD *
FROM [lib://0000_Resources/0020_QVD_Transform/Facts/DataRobot/GlobalData_ProductionVolumePerProject.qvd]
(qvd);

// Die GlobalData-Stammdaten pro Projekt / Plattform dranjoinen (siehe hierzu die andere Qlik Script Datei) 
left join (Facts)
LOAD *
FROM [lib://0000_Resources/0020_QVD_Transform/Facts/DataRobot/GlobalData_master.qvd]
(qvd);



// Feature Engineering
NoConcatenate 
Facts_tmp:
Load *, 
[car set price last 12 months] * [production volume +0 months] as [revenue forecast +0 months],
[car set price last 12 months] * [production volume +1 months] as [revenue forecast +1 months],
[car set price last 12 months] * [production volume +2 months] as [revenue forecast +2 months],
[car set price last 12 months] * [production volume +3 months] as [revenue forecast +3 months],
[car set price last 12 months] * [production volume +4 months] as [revenue forecast +4 months],
[car set price last 12 months] * [production volume +5 months] as [revenue forecast +5 months],
[car set price last 12 months] * [production volume +6 months] as [revenue forecast +6 months],
[car set price last 12 months] * [production volume +7 months] as [revenue forecast +7 months],
[car set price last 12 months] * [production volume +8 months] as [revenue forecast +8 months],
[car set price last 12 months] * [production volume +9 months] as [revenue forecast +9 months],
[car set price last 12 months] * [production volume +10 months] as [revenue forecast +10 months],
[car set price last 12 months] * [production volume +11 months] as [revenue forecast +11 months],
[car set price last 12 months] * [production volume +12 months] as [revenue forecast +12 months],
[car set price last 12 months] * [production volume +13 months] as [revenue forecast +13 months];
Load 
// Firmennummer und Plattform zu String-Feldern machen 
'C' & [%key_company] as [%key_company_tmp],
'P' & [platform no.] as [platform no._tmp],
*,
((year([series project EOP] )*12) + month([series project EOP])) - (((year( [sales date] )*12)+month( [sales date]))) as [Number months until series project EOP],
(((year( [sales date] )*12) + month( [sales date]))) - ((year([series project SOP] )*12) + month([series project SOP])) as [Number months since series project SOP],
((year([Global EOP] )*12) + month([Global EOP])) - (((year( [sales date] )*12)+month( [sales date]))) as [Number months until Global EOP],
(((year( [sales date] )*12) + month( [sales date]))) - ((year([Global SOP] )*12) + month([Global SOP])) as [Number months since Global SOP],
((year([next facelift] )*12) + month([next facelift])) - (((year( [sales date] )*12)+month( [sales date]))) as [Number months until next facelift],
(((year( [sales date] )*12) + month( [sales date]))) - ((year([last actual] )*12) + month([last actual])) as [Number months since last actual],
if([sales date] < [First sales date], Null(),
(((year( [sales date] )*12) + month( [sales date]))) - ((year([First sales date] )*12) + month([First sales date]))) as [Number months since first sale],
(((year( [sales date] )*12) + month( [sales date]))) - ((year([last sales date])*12) + month([last sales date])) as [Number months since last sale],
if([sales date] = [First sales date], 'Yes', 'No' ) as [First sale],
if(isnull([number months with revenue]), 0 , [number months with revenue]) as [number months with revenue_tmp],
if(isnull([accumulated revenue]), 0, [accumulated revenue]) as [accumulated revenue_tmp],
[accumulated revenue since 2020] / [total production volume since 2020] as [car set price since 2020],
[revenue last 12 months] / [total production volume last 12 months] as [car set price last 12 months],
if(match([sales date], '2020-04-01', '2020-05-01'), 'Yes', 'No') as [covid] 

Resident Facts
where [active] = 'Yes'
;

Drop Table Facts; 
Rename Table Facts_tmp to Facts;

Drop Field %key_company, [platform no.], [Global SOP], [Global EOP], [series project EOP], [series project SOP], [accumulated revenue], [number months with revenue]; 
Rename Field [%key_company_tmp] to %key_company, [platform no._tmp] to [platform no.], [accumulated revenue_tmp] to [accumulated revenue], [number months with revenue_tmp] to [number months with revenue];
Drop Field [accumulated revenue since 2020], [total production volume since 2020], [active];


//  Datensätze nach Intercompany unterteilen, um sie getrennt voneinander analysieren zu können 
NoConcatenate 
NoIntercompany_Data:
Load *
Resident Facts
where Intercompany = 'No'
;

Drop Field Intercompany from NoIntercompany_Data;

NoConcatenate 
Intercompany_Data:
Load *
Resident Facts
where Intercompany = 'Yes'
;

Drop Field Intercompany from Intercompany_Data;


// Daten speichern 
Store Facts into 'lib://0000_Resources/0020_QVD_Transform/Facts/DataRobot/OKE Umsatz Version $(vVersion) - Facts_DataRobot - je Plattform und Kundengruppe.qvd' (qvd);
Store Facts into 'lib://0000_Resources/0020_QVD_Transform/Facts/DataRobot/OKE Umsatz Version $(vVersion) - Facts_DataRobot - je Plattform und Kundengruppe.csv' (txt);

Store Intercompany_Data into 'lib://0000_Resources/0020_QVD_Transform/Facts/DataRobot/OKE Umsatz Version $(vVersion) - Facts_DataRobot Intercompany Business - je Plattform und Kundengruppe.qvd' (qvd);
Store Intercompany_Data into 'lib://0000_Resources/0020_QVD_Transform/Facts/DataRobot/OKE Umsatz Version $(vVersion) - Facts_DataRobot Intercompany Business - je Plattform und Kundengruppe.csv' (txt);
Drop Table Intercompany_Data;


Store NoIntercompany_Data into 'lib://0000_Resources/0020_QVD_Transform/Facts/DataRobot/OKE Umsatz Version $(vVersion) - Facts_DataRobot Customer Business - je Plattform und Kundengruppe.qvd' (qvd);
Store NoIntercompany_Data into 'lib://0000_Resources/0020_QVD_Transform/Facts/DataRobot/OKE Umsatz Version $(vVersion) - Facts_DataRobot Customer Business - je Plattform und Kundengruppe.csv' (txt);
Drop Table NoIntercompany_Data;

